@model SearchBoxModel
@if (Model.ShowSearchBox)
{
    <div class="bs_search_bar">
        <div class="bs_search_box_main">
            <form asp-route="ProductSearch" method="get" id="small-search-box-form">
                <input type="text" class="search-box-text" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Text.Label")" aria-label="@T("Search.SearchBox.Text.Label")" />
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton })

                <button type="submit" class="search-box-button" value="@T("Search.Button")">

                    <span class="linearicons-magnifier"></span>
                </button>

                @if (Model.SearchTermMinimumLength > 0)
                {
                    <script asp-location="Footer">
                $("#small-search-box-form").on("submit", function(event) {
                    if ($("#small-searchterms").val() == "") {
                        Swal.fire({
                            title: '<strong>@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))</strong>',
                            icon: 'error',
                            customClass: {
                                confirmButton: 'bs_secondary_button',
                            }
                        })
                        $("#small-searchterms").focus();
                        event.preventDefault();
                    }
                });
                    </script>
                }

                @if (Model.AutoCompleteEnabled)
                {
                    <script asp-location="Footer">
                $(document).ready(function() {
                    var showLinkToResultSearch;
                    var searchText;
                    $('#small-searchterms').autocomplete({
                            delay: 500,
                            minLength: @(Model.SearchTermMinimumLength.ToString()),
                            source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                            appendTo: '.search-box',
                            select: function(event, ui) {
                                $("#small-searchterms").val(ui.item.label);
                                setLocation(ui.item.producturl);
                                return false;
                        },
                        //append link to the end of list
                        open: function(event, ui) {
                            //display link to search page
                            if (showLinkToResultSearch) {
                                searchText = document.getElementById("small-searchterms").value;
                                $(".ui-autocomplete").append("<li class=\"ui-menu-item\" role=\"presentation\"><a href=\"/search?q=" + searchText + "\">@T("Search.SearchBox.SearchPageLink")</a></li>");
                            }
                        }
                    })
                    .data("ui-autocomplete")._renderItem = function(ul, item) {
                        var t = item.label;
                        showLinkToResultSearch = item.showlinktoresultsearch;
                        //html encode
                        t = htmlEncode(t);
                        return $("<li></li>")
                            .data("item.autocomplete", item)
                            .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                            .appendTo(ul);
                    };
                });
                    </script>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox })
            </form>
            <span class="search-note">
                Hit Enter to Search and Esc to Close
            </span>
        </div>
    </div>
    <button type="submit" class="search-box-button-1" value="@T("Search.Button")">
        <span class="linearicons-magnifier"></span>
    </button>
    
}